{"version":3,"sources":["Components/Header.js","Components/DragableText.js","Components/DisplayMeme.js","Components/Canvas.js","Utils/checkImageHeight.js","Components/MemeGen.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","color","Header","classes","useState","message","setMessage","AppBar","position","className","Toolbar","IconButton","edge","aria-label","Typography","variant","src","alt","height","width","htmlFor","type","id","onChange","e","invertedNodes","document","querySelectorAll","body","classList","toggle","forEach","node","DragableText","shapeProps","isSelected","onSelect","shapeRef","React","useRef","trRef","useEffect","current","nodes","getLayer","batchDraw","Fragment","onClick","onTap","ref","draggable","fillAfterStrokeEnabled","strokeScaleEnabled","onDragEnd","x","target","y","onTransformEnd","fontSize","boundBoxFunc","oldBox","newBox","displayMeme","props","texts","state","onSubmit","handleSubmit","map","text","key","name","placeholder","value","handleChange","bind","Tooltip","placement","arrow","fill","handleColorChange","stroke","handleBorderColorChange","handleRemoveText","handleAddText","handleRandomMemeClick","handleDownloadClick","getElementById","click","handleFileChange","Canvas","selectedId","selectText","layerRef","stageRef","checkDoSelect","index","DisplayMeme","handleTextSizeChange","event","preventDefault","uri","toDataURL","link","createElement","download","href","imageData","onMouseDown","onTouchStart","onContentMouseover","image","object","i","newAttrs","rects","slice","setText","checkImageHeight","maxHeight","newHeight","newWidth","MemeGenerator","componentDidMount","Image","url","crossOrigin","fetch","then","response","json","memes","data","setState","allMemeImgs","setTimeout","strokeWidth","push","length","randNum","Math","floor","random","imageObj","updateImage","onload","scope","window","URL","createObjectURL","files","img","this","newheight","newwidth","handleExport","layer","innerHeight","setImage","Component","Footer","Provider","role","App","data-theme","MemeGen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6ea9f8cc.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      color: 'white',\r\n    },\r\n  }));\r\n\r\nfunction Header() {\r\n\r\n    const classes = useStyles();\r\n    const [ message, setMessage ] = useState(false)\r\n\r\n    const switchTheme = (e) => {\r\n        const invertedNodes = document.querySelectorAll('.inverted')\r\n        document.body.classList.toggle('inverted-theme')\r\n        invertedNodes.forEach(node => node.classList.toggle('inverted-theme'))\r\n        setMessage(!message) \r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"static\" className=\"inverted-theme\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    <img \r\n                        className=\"inverted inverted-theme\"\r\n                        src=\"https://upload.wikimedia.org/wikipedia/en/9/9a/Trollface_non-free.png\" \r\n                        // src=\"http://assets.stickpng.com/images/580b585b2edbce24c47b2a2f.png\"\r\n                        alt=\"Problem?\"\r\n                        height=\"50px\"\r\n                        width=\"50px\"\r\n                    />\r\n                </Typography>\r\n                <Typography variant=\"h5\" className={classes.title}>\r\n                    <p>Memeify</p>\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                <label className=\"theme-switch\" htmlFor=\"checkbox\">\r\n                    <input type=\"checkbox\" id=\"checkbox\" onChange={switchTheme}/>\r\n                    <div className=\"slider round\"></div>\r\n                </label>\r\n\r\n\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport {Text, Transformer } from 'react-konva';\n\nconst DragableText = ({ shapeProps, isSelected, onSelect, onChange }) => {\n    const shapeRef = React.useRef();\n    const trRef = React.useRef();\n  \n    React.useEffect(() => {\n      if (isSelected) {\n        // we need to attach transformer manually\n        trRef.current.nodes([shapeRef.current]);\n        trRef.current.getLayer().batchDraw();\n      }\n    }, [isSelected]);\n  \n    return (\n      <React.Fragment>\n        <Text\n          onClick={onSelect}\n          onTap={onSelect}\n          ref={shapeRef}\n          {...shapeProps}\n          draggable\n          fillAfterStrokeEnabled\n          strokeScaleEnabled={false}\n          onDragEnd={(e) => {\n            onChange({\n              ...shapeProps,\n              x: e.target.x(),\n              y: e.target.y(),\n            });\n          }}\n          onTransformEnd={(e) => {\n            const node = shapeRef.current;\n            const fontSize = node.fontSize();\n            onChange({\n              ...shapeProps,\n              x: node.x(),\n              y: node.y(),\n              fontSize: fontSize,\n            });\n          }}\n        />\n        {isSelected && (\n          <Transformer\n            ref={trRef}\n            boundBoxFunc={(oldBox, newBox) => {\n              // limit resize\n              if (newBox.width < 5 || newBox.height < 5) {\n                return oldBox;\n              }\n              return newBox;\n            }}\n          />\n        )}\n      </React.Fragment>\n    );\n};\n\nexport default DragableText","import React from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { MdFileDownload, MdFileUpload, MdShuffle } from 'react-icons/md/index';\n\nfunction displayMeme(props){\n    const {texts} = props.state;\n    return (\n        <form className=\"meme-form\" onSubmit={ props.handleSubmit } >\n            {\n                texts.map(text => (\n                    <div key={text.id*10}>\n                        <input\n                            className=\"input\"\n                            key={text.id}\n                            type=\"text\"\n                            name={text.text}\n                            placeholder=\"Funny text goes here....\"\n                            value= {text.text }\n                            onChange={ props.handleChange.bind(this, text.id, \"text\") }\n                        />\n\n                        <Tooltip title='Text Color' placement='top-start' arrow>  \n                            <input\n                                className=\"colorPicker inverted\"\n                                type=\"color\"\n                                name=\"bottomColor\"\n                                value={ text.fill }\n                                onChange={ props.handleColorChange.bind(this, text.id) }\n                            />\n                        </Tooltip>\n          \n                        <Tooltip title='Border Color' placement='top-start' arrow>\n                            <input\n                                className=\"colorPicker inverted\"\n                                type=\"color\"\n                                name=\"bottomBorderColor\"\n                                value={ text.stroke }\n                                onChange={ props.handleBorderColorChange.bind(this, text.id) }\n                            />\n                        </Tooltip>\n\n                        {/* <input\n                            className=\"colorPicker inverted\"\n                            type=\"number\"\n                            name=\"stroke\"\n                            value={ text.strokeWidth }\n                            onChange={ props.handleChange.bind(this, text.id, \"strokeWidth\") }\n                            /> */}\n                    </div>\n                ))\n            }\n            \n            <div className='input-control'>\n                <button\n                    id='remove '\n                    className='inverted button'\n                    onClick={props.handleRemoveText}\n                >\n                    -\n                </button>\n                <button\n                    id='add'\n                    className='inverted button'\n                    onClick={props.handleAddText}\n                >\n                    +\n                </button>\n            </div>\n\n            <button\n                type='submit'\n                onClick={props.handleRandomMemeClick }\n                className='inverted button'\n            >\n                <MdShuffle /> Random\n            </button>\n            <button\n                type='submit'\n                onClick={props.handleDownloadClick}\n                className='inverted button'\n            >\n                <MdFileDownload /> download\n            </button>\n            <button\n                className='cutom-file-upload inverted button'\n                type='button'\n                onClick={() => {\n                  const input = document.getElementById('file-upload');\n                  input.click();\n                }}\n            >\n                {' '}\n                <MdFileUpload /> Upload\n            </button>\n            <input id='file-upload' type='file' onChange={props.handleFileChange} />\n        </form>\n    );\n}\n\nexport default displayMeme;\n","import React, { useState, useRef } from \"react\";\nimport DragableText  from \"./DragableText\";\nimport { Stage, Layer, Image } from \"react-konva\";\nimport DisplayMeme from './DisplayMeme'\n\n// props contains => imageData, texts, handleExport(layer), setImage(layer, image)\nconst Canvas = (props) => {\n\tconst [selectedId, selectText] = useState(null);\n\tconst layerRef = useRef(null);\n\tconst stageRef = useRef(null);\n\n\tconst checkDoSelect = (e) => {\n\t\tconst clickedOnEmpty = e.target.index === 0;\n\t\tif (clickedOnEmpty) {\n\t\t\tselectText(null);\n\t\t}\n\t};\n\n\tconst handleExport = (event) => {\n\t\tevent.preventDefault()\n\t\tconst uri = stageRef.current.toDataURL();\n\t\tvar link = document.createElement(\"a\");\n\t\tlink.download = \"meme.png\";\n\t\tlink.href = uri;\n\t\tlink.click();\n\t  };\n\n\treturn (\n\t\t<div className=\"memeRoot\">\n\t\t\t<DisplayMeme \n\t\t\t\tstate={ props.state } \n\t\t\t\thandleRandomMemeClick={ props.handleRandomMemeClick } \n\t\t\t\thandleChange={ props.handleChange }\n\t\t\t\thandleColorChange={ props.handleColorChange }\n\t\t\t\thandleBorderColorChange={ props.handleBorderColorChange }\n\t\t\t\thandleFileChange={ props.handleFileChange } \n\t\t\t\thandleAddText={ props.handleAddText }\n\t\t\t\thandleRemoveText={ props.handleRemoveText }\n\t\t\t\thandleTextSizeChange={ props.handleTextSizeChange }\n\t\t\t\thandleDownloadClick = { handleExport }\n\t\t\t/>\n\t\t\t<div className=\"canvas inverted\" >\n\t\t\t<Stage \n\t\t\t\twidth= { props.imageData.width }\n\t\t\t\theight= { props.imageData.height }\n\t\t\t\tonMouseDown= { checkDoSelect }\n\t\t\t\tonTouchStart= { checkDoSelect }\n\t\t\t\tref = { stageRef }\n\t\t\t\tonContentMouseover\n\t\t\t>\n\t\t\t\t<Layer ref={layerRef} >\n\t\t\t\t\t<Image\n\t\t\t\t\t\tx={0}\n\t\t\t\t\t\ty={0}\n\t\t\t\t\t\timage={props.imageData.object}\n\t\t\t\t\t/>\n\t\t\t\t\t{props.texts.map((text, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<DragableText\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\tshapeProps={text}\n\t\t\t\t\t\t\t\tisSelected={text.id === selectedId}\n\t\t\t\t\t\t\t\tonSelect={ () => selectText(text.id) }\n\t\t\t\t\t\t\t\tonChange={(newAttrs) => {\n\t\t\t\t\t\t\t\t\tconst rects = props.texts.slice();\n\t\t\t\t\t\t\t\t\trects[i] = newAttrs;\n\t\t\t\t\t\t\t\t\tprops.setText(rects);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Layer>\n\t\t\t</Stage>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t);\n}\n\nexport default Canvas","const checkImageHeight = (width, height, maxHeight) => {\n    let newHeight = height\n    let newWidth = width\n    if (height>maxHeight){\n        let ratio = maxHeight/height\n        newWidth = width * ratio\n        newHeight = maxHeight\n    }\n    return {newHeight, newWidth}\n}\n\nexport default checkImageHeight;","import React, { Component } from \"react\"\r\nimport Canvas from './Canvas'\r\n\r\nimport checkImageHeight from \"../Utils/checkImageHeight\"\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            texts: [\r\n                {\r\n                    id: 0,\r\n                    text: \"\",\r\n                    fill: \"#000000\",\r\n                    stroke: \"#FFFFFF\",\r\n                    strokeWidth: 1,\r\n                    fontSize: 30,\r\n                    x:250, \r\n                    y:50\r\n                },\r\n            ],\r\n            allMemeImgs: [],\r\n            imageData:{\r\n                height: 335,\r\n                width: 568,\r\n                url: \"http://i.imgflip.com/1bij.jpg\",\r\n                maxHeight: Math.floor(window.innerHeight*0.7),\r\n                object: null,\r\n            },\r\n            updateImage: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const { imageData } = this.state\r\n        var image = new Image()\r\n        image.src = imageData.url\r\n        image.crossOrigin = \"anonymous\"\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const { memes } = response.data\r\n            imageData.object = image\r\n            this.setState({ allMemeImgs: memes, imageData}) \r\n        });\r\n    }\r\n\r\n    handleColorChange = (i, event) => {\r\n        const { name, value } = event.target\r\n\r\n        setTimeout(() => {\r\n            var texts = [...this.state.texts];\r\n            texts[i].fill = value; \r\n\r\n            this.setState({ [name]: value })\r\n        }, 250);\r\n    }\r\n\r\n    handleBorderColorChange = (i, event) => {\r\n        const { name, value } = event.target\r\n\r\n        setTimeout(() => {\r\n            var texts = [...this.state.texts];\r\n            texts[i].stroke = value; \r\n\r\n            this.setState({ [name]: value })\r\n        }, 250);\r\n    }\r\n\r\n    handleChange = (i, type, event) => {\r\n        const { value } = event.target\r\n        var texts = [...this.state.texts];\r\n        switch(type){\r\n            case \"text\":\r\n                texts[i].text = value;\r\n                break; \r\n            case \"strokeWidth\":\r\n                texts[i].strokeWidth = value;\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        this.setText(texts);\r\n    }\r\n\r\n\r\n    setText = (text) => this.setState(text)\r\n\r\n    handleAddText = (event) => {\r\n        event.preventDefault()\r\n        var texts = [...this.state.texts]\r\n        texts.push({\r\n            id:texts.length,\r\n            text: \"\",\r\n            fill: \"#000000\",\r\n            stroke: \"#FFFFFF\",\r\n            x:50, \r\n            y:50,\r\n            fontSize: 30,\r\n            strokeWidth: 1\r\n        })\r\n        this.setState({ texts });\r\n    }\r\n\r\n    handleRemoveText = (event) => {\r\n        event.preventDefault()\r\n        var texts = this.state.texts.slice(0,-1);\r\n        this.setState({ texts });\r\n    }\r\n\r\n    handleRandomMemeClick = (event) => {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const { url, width, height } = this.state.allMemeImgs[randNum]\r\n        const {imageData} = this.state\r\n        var { newHeight, newWidth } = checkImageHeight(width, height, this.state.imageData.maxHeight)\r\n        \r\n        var imageObj = new Image();\r\n        imageObj.crossOrigin = \"Anonymous\"\r\n        imageObj.height = imageData.height = newHeight\r\n        imageObj.width = imageData.width = newWidth\r\n        imageObj.src = imageData.url = url\r\n        imageData.updateImage = true\r\n        imageData.object = imageObj\r\n\r\n        imageObj.onload = () => this.setState({ imageData })\r\n    }\r\n\r\n    handleFileChange = (event) => {\r\n        const scope = this;\r\n        const url = window.URL.createObjectURL(event.target.files[0])\r\n        const img = new Image();\r\n        img.onload = function() {\r\n            const { newheight, newwidth } = checkImageHeight(this.width, this.height)\r\n            scope.setState({ url, width: newwidth, height: newheight, updateImage: true })\r\n        }\r\n        img.src = url;\r\n    }\r\n\r\n    handleExport = (layer) => {\r\n        const uri = layer.current.toDataURL();\r\n        var link = document.createElement(\"a\");\r\n        link.download = \"meme.png\";\r\n        link.href = uri;\r\n        link.click();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Canvas \r\n                state={ this.state } \r\n                handleRandomMemeClick={ this.handleRandomMemeClick } \r\n                handleChange={ this.handleChange }\r\n                handleColorChange={ this.handleColorChange }\r\n                handleBorderColorChange={ this.handleBorderColorChange }\r\n                handleFileChange={ this.handleFileChange } \r\n                handleAddText={ this.handleAddText }\r\n                handleRemoveText={ this.handleRemoveText }\r\n                handleTextSizeChange={ this.handleTextSizeChange }\r\n\r\n                imageData = {this.state.imageData}\r\n                texts = {this.state.texts}\r\n                handleExport = {this.handleExport} \r\n                setImage = {this.setImage}\r\n                setText={ this.setText } \r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react';\nimport { FaGithub, FaTwitter  } from 'react-icons/fa'\nimport { IconContext } from \"react-icons\";\n\nfunction Footer() {\n\n    return (\n        <div id=\"footer\">\n            <div id=\"left\">\n                <a href=\"https://twitter.com/jai_dewani\">\n                    <IconContext.Provider value={{color:\"rgb(29, 161, 242)\"}}>\n                        <div><FaTwitter/></div>\n                    </IconContext.Provider>\n                </a>\n            </div>\n            <div id=\"middle\">\n                Made with <span role=\"img\"aria-label=\"Red Heart\" >❤️</span> by <a href=\"https://github.com/jai-dewani\">Jai Kumar Dewani</a>                \n            </div>\n            <div id=\"right\">\n                <a href=\"https://github.com/jai-dewani/memeify\">\n                    <IconContext.Provider value={{color:\"black\"}}>\n                        <div><FaGithub/></div>\n                    </IconContext.Provider>\n                </a>\n            </div>      \n        </div>\n    )\n}\n\nexport default Footer","import React from \"react\"\r\nimport Header from \"./Components/Header\"\r\nimport MemeGenerator from \"./Components/MemeGen\"\r\nimport Footer from \"./Components/Footer\";\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"app-container\" data-theme=\"dark\">\r\n            <Header />\r\n            <MemeGenerator />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}